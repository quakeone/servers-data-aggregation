// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServerDataAggregation.Persistence;

#nullable disable

namespace ServerDataAggregation.Persistence.Migrations
{
    [DbContext(typeof(PersistenceContext))]
    [Migration("20230117043505_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ServerDataAggregation.Persistence.Models.Server", b =>
                {
                    b.Property<int>("ServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("server_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ServerId"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("api_key");

                    b.Property<string>("Country")
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<int>("FailedQueryAttempts")
                        .HasColumnType("integer")
                        .HasColumnName("failed_query_attempts");

                    b.Property<int>("GameId")
                        .HasColumnType("integer")
                        .HasColumnName("game_id");

                    b.Property<DateTime?>("LastQuery")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_query");

                    b.Property<int>("LastQueryResult")
                        .HasColumnType("integer")
                        .HasColumnName("query_result");

                    b.Property<DateTime?>("LastQuerySuccess")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_query_success");

                    b.Property<string>("Locality")
                        .HasColumnType("text")
                        .HasColumnName("locality");

                    b.Property<string>("Metadata")
                        .HasColumnType("text")
                        .HasColumnName("metadata");

                    b.Property<string>("Mod")
                        .HasColumnType("text")
                        .HasColumnName("mod");

                    b.Property<DateTime?>("NextQuery")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("next_query");

                    b.Property<string>("Parameters")
                        .HasColumnType("text")
                        .HasColumnName("parameters");

                    b.Property<int>("Port")
                        .HasColumnType("integer")
                        .HasColumnName("port");

                    b.Property<int>("QueryInterval")
                        .HasColumnType("integer")
                        .HasColumnName("query_interval");

                    b.HasKey("ServerId");

                    b.ToTable("server");
                });

            modelBuilder.Entity("ServerDataAggregation.Persistence.Models.ServerSnapshot", b =>
                {
                    b.Property<int>("ServerSnapshotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("server_snapshot_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ServerSnapshotId"));

                    b.Property<string>("Hostname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hostname");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip_address");

                    b.Property<string>("Map")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("map");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("integer")
                        .HasColumnName("max_players");

                    b.Property<string>("Mod")
                        .HasColumnType("text")
                        .HasColumnName("mod");

                    b.Property<string>("Mode")
                        .HasColumnType("text")
                        .HasColumnName("mode");

                    b.Property<int>("ServerId")
                        .HasColumnType("integer")
                        .HasColumnName("server_id");

                    b.Property<string>("ServerSettings")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("server_settings");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("ServerSnapshotId");

                    b.ToTable("server_snapshot");
                });
#pragma warning restore 612, 618
        }
    }
}
